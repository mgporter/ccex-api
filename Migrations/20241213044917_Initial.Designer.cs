// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ccex_api.Data;

#nullable disable

namespace ccex_api.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20241213044917_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChineseCharacterChineseCharacter", b =>
                {
                    b.Property<int>("ComponentsId")
                        .HasColumnType("integer");

                    b.Property<int>("DerivativesId")
                        .HasColumnType("integer");

                    b.HasKey("ComponentsId", "DerivativesId");

                    b.HasIndex("DerivativesId");

                    b.ToTable("ChineseCharacterChineseCharacter");
                });

            modelBuilder.Entity("ccex_api.Models.ChineseCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseId")
                        .HasColumnType("integer");

                    b.Property<string>("Char")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<int?>("PinyinId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<string[]>("PrimaryPinyin")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.PrimitiveCollection<string[]>("SecondaryPinyin")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("BaseId");

                    b.HasIndex("Char")
                        .IsUnique();

                    b.HasIndex("PinyinId");

                    b.ToTable("ChineseCharacter");
                });

            modelBuilder.Entity("ccex_api.Models.Pinyin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Syllable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SyllableWithToneMark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ToneNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SyllableWithToneMark")
                        .IsUnique();

                    b.HasIndex("Syllable", "ToneNumber")
                        .IsUnique();

                    b.ToTable("Pinyin");
                });

            modelBuilder.Entity("ChineseCharacterChineseCharacter", b =>
                {
                    b.HasOne("ccex_api.Models.ChineseCharacter", null)
                        .WithMany()
                        .HasForeignKey("ComponentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ccex_api.Models.ChineseCharacter", null)
                        .WithMany()
                        .HasForeignKey("DerivativesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ccex_api.Models.ChineseCharacter", b =>
                {
                    b.HasOne("ccex_api.Models.ChineseCharacter", "Base")
                        .WithMany("Variants")
                        .HasForeignKey("BaseId");

                    b.HasOne("ccex_api.Models.Pinyin", null)
                        .WithMany("Chars")
                        .HasForeignKey("PinyinId");

                    b.OwnsMany("ccex_api.Aggregates.TradCharacterStub", "TradChars", b1 =>
                        {
                            b1.Property<int>("ChineseCharacterId")
                                .HasColumnType("integer");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Char")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Definition")
                                .HasColumnType("text");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.PrimitiveCollection<string[]>("Pinyin")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.HasKey("ChineseCharacterId", "__synthesizedOrdinal");

                            b1.ToTable("ChineseCharacter");

                            b1.ToJson("TradChars");

                            b1.WithOwner()
                                .HasForeignKey("ChineseCharacterId");
                        });

                    b.Navigation("Base");

                    b.Navigation("TradChars");
                });

            modelBuilder.Entity("ccex_api.Models.ChineseCharacter", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("ccex_api.Models.Pinyin", b =>
                {
                    b.Navigation("Chars");
                });
#pragma warning restore 612, 618
        }
    }
}
